// Linked List Basic


#include <iostream>
using namespace std;

class List;

class Node{
    int data;

    public:
        Node* next;
        Node(int d):data(d),next(NULL){}
        
        int getData(){
            return data;
        }
        
        friend class List;
};

class List{
    Node * head;
    Node * tail;
    
    public:
    List():head(NULL),tail(NULL){}
    
    Node* begin(){
        return head;
    }
    
    void push_front(int data){
        if(head == NULL){
            Node * n = new Node(data);
            head = tail = n;
            return;
        }else{
            Node * n = new Node(data);
            n->next = head;
            head = n;
        }
    }
    
    void push_back(int data){
        if(head == NULL){
            Node * n = new Node(data);
            head = tail = n;
        }else{
            Node * n = new Node(data);
            tail->next = n;
            tail = n;
        }
    }
    
    void insert(int data,int pos){
        if(pos == 0){
            push_front(data);
            return;
        }
        
        Node* temp = head;
        
        for(int jump=1;jump<=pos-1;jump++){
            temp = temp->next;
        }
        
        Node * n = new Node(data);
        n->next = temp->next;
        temp->next = n;
    }
    
    bool search(Node* head,int key){
        Node* temp = head;
        
        while(temp!=NULL){
            if(head->data==key){
                return true;
            }
            head = head->next;
        }
        return false;
    }
    bool searchRecursive(Node* head,int key){
        if(head==NULL){
            return false;
        }if(head->data==key){
            return true;
        }else{
            return searchRecursive(head->next,key);
        }
    }
};


int main(){
    
    List l;
    // Insert element back and front.
    l.push_front(1);
    l.push_front(0);
    l.push_back(3);
    l.insert(2,2);
    
    Node* head = l.begin();
    
    // Search
    cout<<l.search(head, 1)<<endl;
    cout<<l.searchRecursive(head, 2)<<endl;
    
    
    // display Linked List
    while(head != NULL){
        cout << head->getData() << " -> ";
        head = head->next;
    }
    
    return 0;
}
